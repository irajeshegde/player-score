{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/players.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalPlayers","className","Counter","style","fontSize","fontWeight","prevProms","prevState","console","log","Fragment","this","props","player","id","getBatchClasses","formatCount","onClick","onIncrement","onDelete","classes","value","Component","Players","onReset","players","map","key","App","state","handleIncrement","index","indexOf","setState","handleReset","p","handleDelete","counterId","newPlayers","filter","c","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.061b07c9.chunk.js","sourcesContent":["import React from \"react\";\n\nconst NavBar = ({ totalPlayers }) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <h4 className=\"navbar-brand mb-0 h1\">\n        Score Board{\" \"}\n        <span className=\"badge badge-pill badge-secondary\">\n          Total players: {totalPlayers}\n        </span>\n      </h4>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  componentDidUpdate(prevProms, prevState) {\n    console.log(\"PrevProms\", prevProms);\n    console.log(\"PrevState\", prevState);\n  }\n\n  componentWillUnmount() {\n    console.log(\"Counter - Unmount!\");\n  }\n\n  style = {\n    fontSize: 14,\n    fontWeight: \"bold\"\n  };\n\n  render() {\n    console.log(\"Counter - Rendered!\");\n    return (\n      <React.Fragment>\n        <h4>Player {this.props.player.id}</h4>\n        <span className={this.getBatchClasses()}>{this.formatCount()}</span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.player)}\n          style={this.style}\n          className=\"btn btn-success btn m-2\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.player.id)}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n      </React.Fragment>\n    );\n  }\n\n  getBatchClasses() {\n    let classes = \"badge m-1 badge-\";\n    classes += this.props.player.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.props.player;\n    return value === 0 ? \"Zero\" : value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Players extends Component {\n  render() {\n    console.log(\"Counters - Rendered!\");\n    const { onDelete, onIncrement, onReset, players } = this.props;\n    return (\n      <div>\n        <button onClick={onReset} className=\"btn-primary btn m-2\">\n          Reset\n        </button>\n        {players.map(player => (\n          <Counter\n            key={player.id}\n            onDelete={onDelete}\n            onIncrement={onIncrement}\n            player={player}\n          ></Counter>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Players;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Players from \"./components/players\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    players: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n\n  constructor() {\n    super();\n    console.log(\"App - Constructor!\");\n  }\n\n  componentDidMount() {\n    console.log(\"App - Mounted!\");\n  }\n\n  handleIncrement = player => {\n    const players = [...this.state.players];\n    const index = players.indexOf(player);\n    console.log(index);\n    players[index] = { ...player };\n    players[index].value++;\n    this.setState({ players });\n  };\n\n  handleReset = () => {\n    const players = this.state.players.map(p => {\n      p.value = 0;\n      return p;\n    });\n    this.setState({ players });\n  };\n\n  handleDelete = counterId => {\n    const newPlayers = this.state.players.filter(c => c.id !== counterId);\n    console.log(\"Event handler Delete called!\", counterId);\n    this.setState({ players: newPlayers });\n  };\n\n  render() {\n    console.log(\"App - Rendered!\");\n    return (\n      <React.Fragment>\n        <NavBar\n          totalPlayers={this.state.players.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Players\n            players={this.state.players}\n            onReset={this.handleReset}\n            onDelete={this.handleDelete}\n            onIncrement={this.handleIncrement}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}